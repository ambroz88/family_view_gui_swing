package org.ambrogenea.familyview.gui.swing;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.ambrogenea.familyview.gui.swing.components.DrawingFrame;
import org.ambrogenea.familyview.gui.swing.components.PersonPanel;
import org.ambrogenea.familyview.gui.swing.model.Table;
import org.ambrogenea.familyview.gui.swing.treepanels.CloseFamilyPanel;
import org.ambrogenea.familyview.model.AncestorModel;
import org.ambrogenea.familyview.model.AncestorPerson;
import org.ambrogenea.familyview.model.Configuration;
import org.ambrogenea.familyview.model.DataModel;
import org.ambrogenea.familyview.model.Person;
import org.ambrogenea.familyview.model.utils.FileIO;
import org.ambrogenea.familyview.model.utils.Tools;
import org.ambrogenea.familyview.model.word.WordGenerator;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

/**
 *
 * @author Jiri Ambroz <ambroz88@seznam.cz>
 */
public class ApplicationWindow extends JFrame implements PropertyChangeListener {

    private static final int BORDER_SIZE = 70;

    private DataModel dataModel;
    private final Configuration configuration;
    private final JFileChooser openFC;
    private PersonPanel personImage;

    /**
     * Creates new form ApplicationWindow
     */
    public ApplicationWindow() {
        configuration = new Configuration();
        configuration.addPropertyChangeListener(this);

        initComponents();
        ImageIcon img = new ImageIcon(getClass().getClassLoader().getResource("SW Icon.png"));
        setIconImage(img.getImage());
        ImageIcon logo = new ImageIcon(getClass().getClassLoader().getResource("Logo 120x65.png"));
        logoLabel.setIcon(logo);

        Person samplePerson = Tools.generateSamplePerson();
        personImage = new PersonPanel(samplePerson, configuration);
        personImage.setPreferredSize(new Dimension(configuration.getAdultImageWidth(), configuration.getAdultImageHeight()));
        personImagePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        personImagePanel.setSize(new Dimension(240, 180));
        personImagePanel.setPreferredSize(new Dimension(240, 180));
        personImagePanel.add(personImage);

        openFC = new JFileChooser(System.getProperty("user.home") + "/Documents/Genealogie");
        openFC.setFileFilter(new FileNameExtensionFilter("GEDCOM files", "ged"));
        openFC.setDialogType(JFileChooser.OPEN_DIALOG);

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        this.setSize(new Dimension(gd.getDisplayMode().getWidth() - BORDER_SIZE, gd.getDisplayMode().getHeight() - BORDER_SIZE));
        this.setPreferredSize(new Dimension(gd.getDisplayMode().getWidth() - BORDER_SIZE, gd.getDisplayMode().getHeight() - BORDER_SIZE));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsTab = new javax.swing.JTabbedPane();
        settingsRootPanel = new javax.swing.JPanel();
        loadInputButton = new javax.swing.JButton();
        tableScroll = new javax.swing.JScrollPane();
        recordsTable = new javax.swing.JTable();
        fileNameLabel = new javax.swing.JLabel();
        logoLabel = new javax.swing.JLabel();
        LIneagePanel = new javax.swing.JPanel();
        generateLineageButton = new javax.swing.JButton();
        siblingsCheckbox = new javax.swing.JCheckBox();
        spousesCheckbox = new javax.swing.JCheckBox();
        fatherLineageCheckbox = new javax.swing.JCheckBox();
        motherLineageCheckbox = new javax.swing.JCheckBox();
        generationSpinner = new javax.swing.JSpinner();
        generationsLabel = new javax.swing.JLabel();
        generateWord = new javax.swing.JButton();
        closeFamilyPanel = new javax.swing.JPanel();
        generateCloseFamilyButton = new javax.swing.JButton();
        siblingsFamilyCheckbox = new javax.swing.JCheckBox();
        spousesFamilyCheckbox = new javax.swing.JCheckBox();
        childrenCheckbox = new javax.swing.JCheckBox();
        showParentsCheckbox = new javax.swing.JCheckBox();
        generateAncestorButton = new javax.swing.JButton();
        personBoxPanel = new javax.swing.JPanel();
        ageCheckBox = new javax.swing.JCheckBox();
        heraldryCheckBox = new javax.swing.JCheckBox();
        residenceCheckBox = new javax.swing.JCheckBox();
        templeCheckBox = new javax.swing.JCheckBox();
        placesCheckBox = new javax.swing.JCheckBox();
        shortenPlacesCheckBox = new javax.swing.JCheckBox();
        occupationCheckBox = new javax.swing.JCheckBox();
        personBoxLookPanel = new javax.swing.JPanel();
        personImagePanel = new javax.swing.JPanel();
        imageWithLabel = new javax.swing.JLabel();
        imageWidthField = new javax.swing.JTextField();
        TopOffsetLabel = new javax.swing.JLabel();
        topOffsetField = new javax.swing.JTextField();
        bottomOffsetLabel = new javax.swing.JLabel();
        imageHeightLabel = new javax.swing.JLabel();
        imageHeightField = new javax.swing.JTextField();
        bottomOffsetField = new javax.swing.JTextField();
        fontSizeLabel = new javax.swing.JLabel();
        fontSizeField = new javax.swing.JTextField();
        diagramComboBox = new javax.swing.JComboBox<>();
        diagramLabel = new javax.swing.JLabel();
        filenameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Family Viewer");
        setName("rootFrame"); // NOI18N

        settingsTab.setName(""); // NOI18N

        loadInputButton.setText("Load GEDCOM file");
        loadInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInputButtonActionPerformed(evt);
            }
        });

        recordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        tableScroll.setViewportView(recordsTable);

        fileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fileNameLabel.setText("no file selected");

        LIneagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Lineage setup"));

        generateLineageButton.setText("Generate lineage");
        generateLineageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateLineageButtonActionPerformed(evt);
            }
        });

        siblingsCheckbox.setSelected(configuration.isShowSiblings());
        siblingsCheckbox.setText("Show siblings");
        siblingsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siblingsCheckboxActionPerformed(evt);
            }
        });

        spousesCheckbox.setSelected(configuration.isShowSpouses());
        spousesCheckbox.setText("Spouses for root");
        spousesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spousesCheckboxActionPerformed(evt);
            }
        });

        fatherLineageCheckbox.setSelected(configuration.isShowFathersLineage());
        fatherLineageCheckbox.setText("Father's lineage");
        fatherLineageCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatherLineageCheckboxActionPerformed(evt);
            }
        });

        motherLineageCheckbox.setSelected(configuration.isShowMothersLineage());
        motherLineageCheckbox.setText("Mother's lineage");
        motherLineageCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motherLineageCheckboxActionPerformed(evt);
            }
        });

        generationSpinner.setModel(new javax.swing.SpinnerNumberModel(configuration.getGenerationCount(), 1, 20, 1));
        generationSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                generationSpinnerStateChanged(evt);
            }
        });

        generationsLabel.setText("Generations:");

        generateWord.setText("Generate Word");
        generateWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LIneagePanelLayout = new javax.swing.GroupLayout(LIneagePanel);
        LIneagePanel.setLayout(LIneagePanelLayout);
        LIneagePanelLayout.setHorizontalGroup(
            LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LIneagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateLineageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(generateWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(LIneagePanelLayout.createSequentialGroup()
                        .addGroup(LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(siblingsCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(motherLineageCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spousesCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(LIneagePanelLayout.createSequentialGroup()
                                .addComponent(generationsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fatherLineageCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LIneagePanelLayout.setVerticalGroup(
            LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LIneagePanelLayout.createSequentialGroup()
                .addComponent(fatherLineageCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motherLineageCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siblingsCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spousesCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LIneagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generationsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateLineageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateWord)
                .addContainerGap())
        );

        closeFamilyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Close family setup"));

        generateCloseFamilyButton.setText("Close family");
        generateCloseFamilyButton.setMargin(new java.awt.Insets(2, 5, 2, 5));
        generateCloseFamilyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCloseFamilyButtonActionPerformed(evt);
            }
        });

        siblingsFamilyCheckbox.setSelected(configuration.isShowSiblingsFamily());
        siblingsFamilyCheckbox.setText("Show siblings");
        siblingsFamilyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siblingsFamilyCheckboxActionPerformed(evt);
            }
        });

        spousesFamilyCheckbox.setSelected(configuration.isShowSpousesFamily());
        spousesFamilyCheckbox.setText("Show spouses");
        spousesFamilyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spousesFamilyCheckboxActionPerformed(evt);
            }
        });

        childrenCheckbox.setSelected(configuration.isShowChildren());
        childrenCheckbox.setText("Show children");
        childrenCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                childrenCheckboxActionPerformed(evt);
            }
        });

        showParentsCheckbox.setSelected(configuration.isShowParents());
        showParentsCheckbox.setText("Show parents");
        showParentsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showParentsCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout closeFamilyPanelLayout = new javax.swing.GroupLayout(closeFamilyPanel);
        closeFamilyPanel.setLayout(closeFamilyPanelLayout);
        closeFamilyPanelLayout.setHorizontalGroup(
            closeFamilyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(closeFamilyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(closeFamilyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(siblingsFamilyCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showParentsCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spousesFamilyCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(childrenCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generateCloseFamilyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        closeFamilyPanelLayout.setVerticalGroup(
            closeFamilyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(closeFamilyPanelLayout.createSequentialGroup()
                .addComponent(showParentsCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spousesFamilyCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siblingsFamilyCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(childrenCheckbox)
                .addGap(18, 18, 18)
                .addComponent(generateCloseFamilyButton)
                .addGap(12, 12, 12))
        );

        generateAncestorButton.setText("All ancestors");
        generateAncestorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateAncestorButtonActionPerformed(evt);
            }
        });

        personBoxPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Person box setup"));
        personBoxPanel.setPreferredSize(new java.awt.Dimension(307, 123));

        ageCheckBox.setSelected(configuration.isShowAge());
        ageCheckBox.setText("Show age");
        ageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageCheckBoxActionPerformed(evt);
            }
        });

        heraldryCheckBox.setSelected(configuration.isShowHeraldry());
        heraldryCheckBox.setText("Show heraldry");
        heraldryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heraldryCheckBoxActionPerformed(evt);
            }
        });

        residenceCheckBox.setSelected(configuration.isShowResidence());
        residenceCheckBox.setText("Show residence");
        residenceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                residenceCheckBoxActionPerformed(evt);
            }
        });

        templeCheckBox.setSelected(configuration.isShowTemple());
        templeCheckBox.setText("Show temple box");
        templeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templeCheckBoxActionPerformed(evt);
            }
        });

        placesCheckBox.setSelected(configuration.isShowPlaces());
        placesCheckBox.setText("Show places");
        placesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placesCheckBoxActionPerformed(evt);
            }
        });

        shortenPlacesCheckBox.setSelected(configuration.isShortenPlaces());
        shortenPlacesCheckBox.setText("Shorten places");
        shortenPlacesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortenPlacesCheckBoxActionPerformed(evt);
            }
        });

        occupationCheckBox.setSelected(configuration.isShowOccupation());
        occupationCheckBox.setText("Show occupation");
        occupationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occupationCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout personBoxPanelLayout = new javax.swing.GroupLayout(personBoxPanel);
        personBoxPanel.setLayout(personBoxPanelLayout);
        personBoxPanelLayout.setHorizontalGroup(
            personBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shortenPlacesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(personBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(residenceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ageCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(occupationCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                    .addGroup(personBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(placesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(templeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(heraldryCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        personBoxPanelLayout.setVerticalGroup(
            personBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personBoxPanelLayout.createSequentialGroup()
                .addComponent(ageCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(occupationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shortenPlacesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(templeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(heraldryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(residenceCheckBox))
        );

        personBoxLookPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Person box look"));

        personImagePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout personImagePanelLayout = new javax.swing.GroupLayout(personImagePanel);
        personImagePanel.setLayout(personImagePanelLayout);
        personImagePanelLayout.setHorizontalGroup(
            personImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );
        personImagePanelLayout.setVerticalGroup(
            personImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );

        imageWithLabel.setText("Image width");
        imageWithLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        imageWithLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        imageWithLabel.setPreferredSize(new java.awt.Dimension(80, 16));

        imageWidthField.setText(String.valueOf(this.configuration.getAdultImageWidth()));
        imageWidthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageWidthFieldActionPerformed(evt);
            }
        });

        TopOffsetLabel.setText("Top offset");

        topOffsetField.setText(String.valueOf(this.configuration.getAdultTopOffset()));
        topOffsetField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topOffsetFieldActionPerformed(evt);
            }
        });

        bottomOffsetLabel.setText("Bottom offset");

        imageHeightLabel.setText("Image height");

        imageHeightField.setText(String.valueOf(this.configuration.getAdultImageHeight()));
        imageHeightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageHeightFieldActionPerformed(evt);
            }
        });

        bottomOffsetField.setText(String.valueOf(this.configuration.getAdultBottomOffset()));
        bottomOffsetField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomOffsetFieldActionPerformed(evt);
            }
        });

        fontSizeLabel.setText("Font size");

        fontSizeField.setText(String.valueOf(this.configuration.getFontSize()));
        fontSizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeFieldActionPerformed(evt);
            }
        });

        diagramComboBox.setModel(new DefaultComboBoxModel<>(new String[] {Configuration.DIAGRAM_PERGAMEN, Configuration.DIAGRAM_HERALDRY, Configuration.DIAGRAM_WAVE, Configuration.DIAGRAM_DOUBLEWAVE}));
        diagramComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diagramComboBoxActionPerformed(evt);
            }
        });

        diagramLabel.setText("Diagram");

        javax.swing.GroupLayout personBoxLookPanelLayout = new javax.swing.GroupLayout(personBoxLookPanel);
        personBoxLookPanel.setLayout(personBoxLookPanelLayout);
        personBoxLookPanelLayout.setHorizontalGroup(
            personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                                .addComponent(TopOffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(topOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                                .addComponent(bottomOffsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bottomOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                                .addComponent(imageHeightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(imageHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)
                        .addComponent(personImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                                .addComponent(fontSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fontSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(diagramComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(diagramLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(imageWithLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        personBoxLookPanelLayout.setVerticalGroup(
            personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personBoxLookPanelLayout.createSequentialGroup()
                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageWithLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                        .addComponent(diagramLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diagramComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fontSizeLabel)
                            .addComponent(fontSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                        .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(personImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(personBoxLookPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TopOffsetLabel)
                                    .addComponent(topOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(imageHeightLabel)
                                    .addComponent(imageHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addGroup(personBoxLookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bottomOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bottomOffsetLabel))))
                        .addContainerGap())))
        );

        filenameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filenameLabel.setText("Name of selected file:");

        javax.swing.GroupLayout settingsRootPanelLayout = new javax.swing.GroupLayout(settingsRootPanel);
        settingsRootPanel.setLayout(settingsRootPanelLayout);
        settingsRootPanelLayout.setHorizontalGroup(
            settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsRootPanelLayout.createSequentialGroup()
                        .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(loadInputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(LIneagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closeFamilyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(generateAncestorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(personBoxLookPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(personBoxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(settingsRootPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tableScroll)))
                .addContainerGap())
        );
        settingsRootPanelLayout.setVerticalGroup(
            settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsRootPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsRootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(personBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                                .addComponent(personBoxLookPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(LIneagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(settingsRootPanelLayout.createSequentialGroup()
                                .addComponent(closeFamilyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generateAncestorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(settingsRootPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(loadInputButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );

        settingsTab.addTab("Settings", settingsRootPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsTab))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsTab, javax.swing.GroupLayout.DEFAULT_SIZE, 854, Short.MAX_VALUE)
                .addContainerGap())
        );

        settingsTab.getAccessibleContext().setAccessibleName("Settings");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void childrenCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_childrenCheckboxActionPerformed
        configuration.setShowChildren(childrenCheckbox.isSelected());
        if (childrenCheckbox.isSelected() && !spousesFamilyCheckbox.isSelected()) {
            spousesFamilyCheckbox.setSelected(true);
            configuration.setShowSpousesFamily(true);
        }
    }//GEN-LAST:event_childrenCheckboxActionPerformed

    private void spousesFamilyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spousesFamilyCheckboxActionPerformed
        configuration.setShowSpousesFamily(spousesFamilyCheckbox.isSelected());
        if (!spousesFamilyCheckbox.isSelected() && childrenCheckbox.isSelected()) {
            configuration.setShowChildren(false);
            childrenCheckbox.setSelected(false);
        }
    }//GEN-LAST:event_spousesFamilyCheckboxActionPerformed

    private void siblingsFamilyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siblingsFamilyCheckboxActionPerformed
        configuration.setShowSiblingsFamily(siblingsFamilyCheckbox.isSelected());
        if (siblingsFamilyCheckbox.isSelected() && !showParentsCheckbox.isSelected()) {
            showParentsCheckbox.setSelected(true);
            configuration.setShowParents(true);
        }
    }//GEN-LAST:event_siblingsFamilyCheckboxActionPerformed

    private void generateCloseFamilyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCloseFamilyButtonActionPerformed
        if (recordsTable.getSelectedRow() != -1) {

            AncestorModel ancestors = new AncestorModel(dataModel, configuration.getGenerationCount());
            configuration.setAncestorModel(ancestors);
            AncestorPerson personWithAncestors = ancestors.generateCloseFamily(recordsTable.getSelectedRow());

            DrawingFrame drawing = new DrawingFrame();
            drawing.generateCloseFamily(personWithAncestors, configuration);

            settingsTab.addTab(personWithAncestors.getName(), drawing);
            settingsTab.setSelectedIndex(settingsTab.getTabCount() - 1);
        }
    }//GEN-LAST:event_generateCloseFamilyButtonActionPerformed

    private void generationSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_generationSpinnerStateChanged
        configuration.setGenerationCount((int) generationSpinner.getValue());
    }//GEN-LAST:event_generationSpinnerStateChanged

    private void motherLineageCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motherLineageCheckboxActionPerformed
        configuration.setShowMothersLineage(motherLineageCheckbox.isSelected());
        if (!motherLineageCheckbox.isSelected() && !fatherLineageCheckbox.isSelected()) {
            configuration.setShowFathersLineage(true);
            fatherLineageCheckbox.setSelected(true);
        }
    }//GEN-LAST:event_motherLineageCheckboxActionPerformed

    private void fatherLineageCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fatherLineageCheckboxActionPerformed
        configuration.setShowFathersLineage(fatherLineageCheckbox.isSelected());
        if (!fatherLineageCheckbox.isSelected() && !motherLineageCheckbox.isSelected()) {
            configuration.setShowMothersLineage(true);
            motherLineageCheckbox.setSelected(true);
        }
    }//GEN-LAST:event_fatherLineageCheckboxActionPerformed

    private void spousesCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spousesCheckboxActionPerformed
        configuration.setShowSpouses(spousesCheckbox.isSelected());
    }//GEN-LAST:event_spousesCheckboxActionPerformed

    private void siblingsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siblingsCheckboxActionPerformed
        configuration.setShowSiblings(siblingsCheckbox.isSelected());
    }//GEN-LAST:event_siblingsCheckboxActionPerformed

    private void generateLineageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLineageButtonActionPerformed
        if (recordsTable.getSelectedRow() != -1) {
            AncestorModel ancestors = new AncestorModel(dataModel, configuration.getGenerationCount());
            configuration.setAncestorModel(ancestors);

            DrawingFrame drawing = new DrawingFrame();
            AncestorPerson personWithAncestors;

            if (configuration.isShowFathersLineage() && configuration.isShowMothersLineage()) {
                personWithAncestors = ancestors.generateParentsLineage(recordsTable.getSelectedRow());
                drawing.generateParentsLineage(personWithAncestors, configuration);
            } else if (configuration.isShowFathersLineage()) {
                personWithAncestors = ancestors.generateFatherLineage(recordsTable.getSelectedRow());
                drawing.generateFatherLineage(personWithAncestors, configuration);
            } else {
                personWithAncestors = ancestors.generateMotherLineage(recordsTable.getSelectedRow());
                drawing.generateMotherLineage(personWithAncestors, configuration);
            }

            settingsTab.addTab(personWithAncestors.getName(), drawing);
            settingsTab.setSelectedIndex(settingsTab.getTabCount() - 1);
        }
    }//GEN-LAST:event_generateLineageButtonActionPerformed

    private void fontSizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeFieldActionPerformed
        int fontSize;
        try {
            fontSize = Integer.valueOf(fontSizeField.getText());
        } catch (NumberFormatException e) {
            fontSize = 13;
            fontSizeField.setText(String.valueOf(fontSize));
        }
        configuration.setFontSize(fontSize);
    }//GEN-LAST:event_fontSizeFieldActionPerformed

    private void topOffsetFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topOffsetFieldActionPerformed
        int topOffset;
        try {
            topOffset = Integer.valueOf(topOffsetField.getText());
        } catch (NumberFormatException e) {
            topOffset = 30;
            topOffsetField.setText(String.valueOf(topOffset));
        }
        configuration.setAdultTopOffset(topOffset);
    }//GEN-LAST:event_topOffsetFieldActionPerformed

    private void imageHeightFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageHeightFieldActionPerformed
        int imageHeight;
        try {
            imageHeight = Integer.valueOf(imageHeightField.getText());
        } catch (NumberFormatException e) {
            imageHeight = 140;
            imageHeightField.setText(String.valueOf(imageHeight));
        }
        configuration.setAdultImageHeight(imageHeight);
    }//GEN-LAST:event_imageHeightFieldActionPerformed

    private void imageWidthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageWidthFieldActionPerformed
        int imageWidth;
        try {
            imageWidth = Integer.valueOf(imageWidthField.getText());
        } catch (NumberFormatException e) {
            imageWidth = 140;
            imageWidthField.setText(String.valueOf(imageWidth));
        }
        configuration.setAdultImageWidth(imageWidth);
    }//GEN-LAST:event_imageWidthFieldActionPerformed

    private void generateAncestorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateAncestorButtonActionPerformed
        if (recordsTable.getSelectedRow() != -1) {

            AncestorModel ancestors = new AncestorModel(dataModel, configuration.getGenerationCount());
            configuration.setAncestorModel(ancestors);
            AncestorPerson personWithAncestors = ancestors.generateAncestors(recordsTable.getSelectedRow());

            DrawingFrame drawing = new DrawingFrame();
            drawing.generateAllAncestors(personWithAncestors, configuration);

            settingsTab.addTab(personWithAncestors.getName(), drawing);
            settingsTab.setSelectedIndex(settingsTab.getTabCount() - 1);
        }
    }//GEN-LAST:event_generateAncestorButtonActionPerformed

    private void loadInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadInputButtonActionPerformed
        int returnVal = openFC.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = openFC.getSelectedFile();
            loadTable(file.getAbsolutePath());
            fileNameLabel.setText(file.getName());
            System.out.println("Opening: " + file.getName() + ".");
        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_loadInputButtonActionPerformed

    private void showParentsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showParentsCheckboxActionPerformed
        configuration.setShowParents(showParentsCheckbox.isSelected());
        if (!showParentsCheckbox.isSelected() && siblingsFamilyCheckbox.isSelected()) {
            configuration.setShowSiblingsFamily(false);
            siblingsFamilyCheckbox.setSelected(false);
        }
    }//GEN-LAST:event_showParentsCheckboxActionPerformed

    private void bottomOffsetFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomOffsetFieldActionPerformed
        int bottomOffset;
        try {
            bottomOffset = Integer.valueOf(bottomOffsetField.getText());
        } catch (NumberFormatException e) {
            bottomOffset = 30;
            bottomOffsetField.setText(String.valueOf(bottomOffset));
        }
        configuration.setAdultBottomOffset(bottomOffset);
    }//GEN-LAST:event_bottomOffsetFieldActionPerformed

    private void heraldryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heraldryCheckBoxActionPerformed
        configuration.setShowHeraldry(heraldryCheckBox.isSelected());
    }//GEN-LAST:event_heraldryCheckBoxActionPerformed

    private void templeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templeCheckBoxActionPerformed
        configuration.setShowTemple(templeCheckBox.isSelected());
    }//GEN-LAST:event_templeCheckBoxActionPerformed

    private void generateWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWordActionPerformed
        if (recordsTable.getSelectedRow() != -1) {
            XWPFDocument doc = WordGenerator.createWordDocument(WordGenerator.FORMAT_A4);
            AncestorModel ancestors = new AncestorModel(dataModel, configuration.getGenerationCount());
            AncestorPerson personWithAncestors;

            if (configuration.isShowFathersLineage()) {
                personWithAncestors = ancestors.generateFatherLineage(recordsTable.getSelectedRow());
                addFamilyToDoc(personWithAncestors, doc);
                createFamilyDocument(personWithAncestors.getFather(), doc);
            } else {
                personWithAncestors = ancestors.generateMotherLineage(recordsTable.getSelectedRow());
                addFamilyToDoc(personWithAncestors, doc);
                createFamilyDocument(personWithAncestors.getMother(), doc);
            }

            saveFamilyDocument(personWithAncestors, doc);
        }
    }//GEN-LAST:event_generateWordActionPerformed

    private void residenceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residenceCheckBoxActionPerformed
        configuration.setShowResidence(residenceCheckBox.isSelected());
    }//GEN-LAST:event_residenceCheckBoxActionPerformed

    private void ageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageCheckBoxActionPerformed
        configuration.setShowAge(ageCheckBox.isSelected());
    }//GEN-LAST:event_ageCheckBoxActionPerformed

    private void placesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placesCheckBoxActionPerformed
        configuration.setShowPlaces(placesCheckBox.isSelected());
        if (!placesCheckBox.isSelected() && shortenPlacesCheckBox.isSelected()) {
            shortenPlacesCheckBox.setSelected(false);
            configuration.setShortenPlaces(false);
        }
    }//GEN-LAST:event_placesCheckBoxActionPerformed

    private void shortenPlacesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortenPlacesCheckBoxActionPerformed
        configuration.setShortenPlaces(shortenPlacesCheckBox.isSelected());
        if (!placesCheckBox.isSelected() && shortenPlacesCheckBox.isSelected()) {
            placesCheckBox.setSelected(true);
            configuration.setShowPlaces(true);
        }
    }//GEN-LAST:event_shortenPlacesCheckBoxActionPerformed

    private void occupationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_occupationCheckBoxActionPerformed
        configuration.setShowOccupation(occupationCheckBox.isSelected());
    }//GEN-LAST:event_occupationCheckBoxActionPerformed

    private void diagramComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diagramComboBoxActionPerformed
        configuration.setAdultDiagram(diagramComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_diagramComboBoxActionPerformed

    private void createFamilyDocument(AncestorPerson person, XWPFDocument doc) {
        if (person != null) {
            AncestorPerson actualPerson = person;
            int generations = 0;
            while (actualPerson != null) {
                if (generations < configuration.getGenerationCount()) {
                    addFamilyToDoc(actualPerson, doc);
                    actualPerson = actualPerson.getFather();
                    generations++;
                } else {
                    actualPerson = null;
                }
            }
        }
    }

    private void addFamilyToDoc(AncestorPerson actualPerson, XWPFDocument doc) {
        CloseFamilyPanel familyPanel = createOneFamily(actualPerson);
        int generations = familyPanel.calculateGenerations();
        WordGenerator.setMaxHeight(generations);
        WordGenerator.createFamilyPage(doc, "Rodina " + actualPerson.getName());
        WordGenerator.addImageToPage(doc, familyPanel.getStream(), familyPanel.getWidth(), familyPanel.getHeight());
    }

    private CloseFamilyPanel createOneFamily(AncestorPerson personWithAncestors) {
        CloseFamilyPanel familyPanel = new CloseFamilyPanel(personWithAncestors, configuration);
        familyPanel.drawAncestorPanel();
        familyPanel.addNotify();
        familyPanel.validate();
        return familyPanel;
    }

    private void saveFamilyDocument(AncestorPerson personWithAncestors, XWPFDocument doc) {
        try {
            WordGenerator.writeDocument(System.getProperty("user.home") + "/Documents/Genealogie/" + personWithAncestors.getName() + ".docx", doc);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void loadTable(String absolutePath) {
        try {
            ArrayList<String> lines = FileIO.FileToLines(absolutePath);
            dataModel = new DataModel();
            dataModel.loadGEDCOMLines(lines);
            recordsTable.setModel(new Table(dataModel));
            recordsTable.setAutoCreateRowSorter(true);
        } catch (IOException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ApplicationWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ApplicationWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LIneagePanel;
    private javax.swing.JLabel TopOffsetLabel;
    private javax.swing.JCheckBox ageCheckBox;
    private javax.swing.JTextField bottomOffsetField;
    private javax.swing.JLabel bottomOffsetLabel;
    private javax.swing.JCheckBox childrenCheckbox;
    private javax.swing.JPanel closeFamilyPanel;
    private javax.swing.JComboBox<String> diagramComboBox;
    private javax.swing.JLabel diagramLabel;
    private javax.swing.JCheckBox fatherLineageCheckbox;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField fontSizeField;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JButton generateAncestorButton;
    private javax.swing.JButton generateCloseFamilyButton;
    private javax.swing.JButton generateLineageButton;
    private javax.swing.JButton generateWord;
    private javax.swing.JSpinner generationSpinner;
    private javax.swing.JLabel generationsLabel;
    private javax.swing.JCheckBox heraldryCheckBox;
    private javax.swing.JTextField imageHeightField;
    private javax.swing.JLabel imageHeightLabel;
    private javax.swing.JTextField imageWidthField;
    private javax.swing.JLabel imageWithLabel;
    private javax.swing.JButton loadInputButton;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JCheckBox motherLineageCheckbox;
    private javax.swing.JCheckBox occupationCheckBox;
    private javax.swing.JPanel personBoxLookPanel;
    private javax.swing.JPanel personBoxPanel;
    private javax.swing.JPanel personImagePanel;
    private javax.swing.JCheckBox placesCheckBox;
    private javax.swing.JTable recordsTable;
    private javax.swing.JCheckBox residenceCheckBox;
    private javax.swing.JPanel settingsRootPanel;
    private javax.swing.JTabbedPane settingsTab;
    private javax.swing.JCheckBox shortenPlacesCheckBox;
    private javax.swing.JCheckBox showParentsCheckbox;
    private javax.swing.JCheckBox siblingsCheckbox;
    private javax.swing.JCheckBox siblingsFamilyCheckbox;
    private javax.swing.JCheckBox spousesCheckbox;
    private javax.swing.JCheckBox spousesFamilyCheckbox;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JCheckBox templeCheckBox;
    private javax.swing.JTextField topOffsetField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("New Tree")) {
            JComponent panel = (JComponent) evt.getNewValue();
            settingsTab.addTab(evt.getOldValue().toString(), panel);
            settingsTab.setSelectedIndex(settingsTab.getTabCount() - 1);
        } else if (evt.getPropertyName().equals(Configuration.CONFIG_CHANGE)) {
            personImage.update();
            personImage.setPreferredSize(new Dimension(configuration.getAdultImageWidth(), configuration.getAdultImageHeight()));
            personImagePanel.repaint();
        }
    }

}
